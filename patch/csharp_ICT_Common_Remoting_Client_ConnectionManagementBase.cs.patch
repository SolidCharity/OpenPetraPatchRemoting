--- before/csharp/ICT/Common/Remoting/Client/ConnectionManagementBase.cs	2014-05-15 21:53:13.000000000 +0200
+++ patched/csharp/ICT/Common/Remoting/Client/ConnectionManagementBase.cs	2014-05-15 21:56:00.000000000 +0200
@@ -4,7 +4,7 @@
 // @Authors:
 //       christiank, timop
 //
-// Copyright 2004-2012 by OM International
+// Copyright 2004-2013 by OM International
 //
 // This file is part of OpenPetra.org.
 //
@@ -24,8 +24,6 @@
 using System;
 using System.Collections;
 using System.Net.Sockets;
-using System.Runtime.Remoting;
-using System.Runtime.Remoting.Lifetime;
 using System.Security.Principal;
 using System.IO;
 using Ict.Common;
@@ -46,53 +44,16 @@
         /// </summary>
         public static TConnectionManagementBase GConnectionManagement = null;
 
-        /// <summary>
-        /// set to typeof(TConnector)
-        /// </summary>
-        public static Type ConnectorType = typeof(TConnector);
-
-        /// <summary>
-        /// keeps the connection to the server
-        /// </summary>
-        protected TConnector FConnector;
-
-        /// <summary>
-        /// the client manager
-        /// </summary>
-        protected IClientManagerInterface FClientManager;
-
-        private String FClientName;
         private Int32 FClientID;
-        private TExecutingOSEnum FServerOS;
-        private String FRemotingURL_PollClientTasks;
-        private IPollClientTasksInterface FRemotePollClientTasks;
         private TEnsureKeepAlive FKeepAlive;
         private TPollClientTasks FPollClientTasks;
-
-        /// <summary>
-        /// the remoting object
-        /// </summary>
-        protected TRemoteBase FRemote;
+        private IClientManager FClientManager;
 
         /// <summary>
         /// the urls of the services
         /// </summary>
         protected Hashtable FRemotingURLs;
 
-        /// <summary>
-        /// we will always contact the server on this URL
-        /// </summary>
-        protected string FCrossDomainURI;
-
-        /// <summary>todoComment</summary>
-        public String ClientName
-        {
-            get
-            {
-                return FClientName;
-            }
-        }
-
         /// <summary>todoComment</summary>
         public Int32 ClientID
         {
@@ -103,15 +64,6 @@
         }
 
         /// <summary>todoComment</summary>
-        public TExecutingOSEnum ServerOS
-        {
-            get
-            {
-                return FServerOS;
-            }
-        }
-
-        /// <summary>todoComment</summary>
         public TEnsureKeepAlive KeepAlive
         {
             get
@@ -120,19 +72,10 @@
             }
         }
 
-        /// <summary>todoComment</summary>
-        public TRemoteBase RemoteObjects
-        {
-            get
-            {
-                return FRemote;
-            }
-        }
-
         /// <summary>
-        /// todoComment
+        /// Connect to the server and authenticate the user
         /// </summary>
-        public bool ConnectToServer(String AUserName,
+        public eLoginEnum ConnectToServer(String AUserName,
             String APassword,
             out Int32 AProcessID,
             out String AWelcomeMessage,
@@ -142,35 +85,24 @@
         {
             AError = "";
             String ConnectionError;
-
-            if (FConnector == null)
-            {
-                FConnector = (TConnector)Activator.CreateInstance(ConnectorType);
-            }
+            AUserInfo = null;
+            ASystemEnabled = false;
+            AWelcomeMessage = string.Empty;
+            AProcessID = -1;
 
             try
             {
-                if (TAppSettingsManager.ConfigFileName.Length > 0)
-                {
-                    // connect to the PetraServer's ClientManager
-                    FConnector.GetRemoteServerConnection(TAppSettingsManager.ConfigFileName, out FClientManager);
-                }
-                else
-                {
-                    // connect to the PetraServer's ClientManager
-                    FConnector.GetRemoteServerConnection(Environment.GetCommandLineArgs()[0] + ".config", out FClientManager);
-                }
+                FClientManager = TConnectionHelper.Connect();
 
                 // register Client session at the PetraServer
-                bool ReturnValue = ConnectClient(AUserName, APassword, FClientManager,
+                eLoginEnum ReturnValue = ConnectClient(AUserName, APassword,
                     out AProcessID,
                     out AWelcomeMessage,
                     out ASystemEnabled,
                     out ConnectionError,
                     out AUserInfo);
-                TRemoteBase.ClientManager = FClientManager;
 
-                if (!ReturnValue)
+                if (ReturnValue != eLoginEnum.eLoginSucceeded)
                 {
                     AError = ConnectionError;
                     return ReturnValue;
@@ -178,58 +110,33 @@
             }
             catch (System.Net.Sockets.SocketException)
             {
-                throw new EServerConnectionServerNotReachableException();
+                return eLoginEnum.eLoginServerNotReachable;
             }
-            catch (EDBConnectionNotEstablishedException exp)
-            {
-                if (exp.Message.IndexOf("Access denied") != -1)
-                {
-                    // Prevent passing out stack trace in case the PetraServer cannot connect
-                    // a Client (to make this happen, somebody would have tampered with the
-                    // DB Password decryption routines...)
-                    throw new EServerConnectionGeneralException("PetraServer misconfiguration!");
-                }
-                else
-                {
-                    throw;
-                }
-            }
-            catch (EClientVersionMismatchException)
+            catch (Exception exp)
             {
-                throw;
+                TLogging.Log(exp.ToString() + Environment.NewLine + exp.StackTrace, TLoggingType.ToLogfile);
+                throw new EServerConnectionGeneralException(exp.ToString());
             }
-            catch (ELoginFailedServerTooBusyException)
+
+            if (TClientSettings.RunAsStandalone)
             {
-                throw;
+                FKeepAlive = null;
+                FPollClientTasks = null;
             }
-            catch (Exception exp)
+            else
             {
-                TLogging.Log(exp.ToString() + Environment.NewLine + exp.StackTrace, TLoggingType.ToLogfile);
-                throw new EServerConnectionGeneralException(exp.ToString());
+                //
+                // start the KeepAlive Thread (which needs to run as long as the Client is running)
+                //
+                FKeepAlive = new TEnsureKeepAlive();
+
+                //
+                // start the PollClientTasks Thread (which needs to run as long as the Client is running)
+                //
+                FPollClientTasks = new TPollClientTasks(FClientID);
             }
 
-            //
-            // acquire .NET Remoting Proxy objects for remoted Server objects
-            //
-
-            FRemotePollClientTasks =
-                (IPollClientTasksInterface)FConnector.GetRemoteObject(FRemotingURL_PollClientTasks, typeof(IPollClientTasksInterface));
-
-            //
-            // start the KeepAlive Thread (which needs to run as long as the Client is running)
-            //
-            FKeepAlive = new TEnsureKeepAlive();
-
-            //
-            // start the PollClientTasks Thread (which needs to run as long as the Client is running)
-            //
-            FPollClientTasks = new TPollClientTasks(FClientID, FRemotePollClientTasks);
-
-            //
-            // initialise object that holds references to all our remote object .NET Remoting Proxies
-            //
-            FRemote = new TRemoteBase(FClientManager);
-            return true;
+            return eLoginEnum.eLoginSucceeded;
         }
 
         /// <summary>
@@ -237,16 +144,14 @@
         /// </summary>
         /// <param name="AUserName"></param>
         /// <param name="APassword"></param>
-        /// <param name="AClientManager"></param>
         /// <param name="AProcessID"></param>
         /// <param name="AWelcomeMessage"></param>
         /// <param name="ASystemEnabled"></param>
         /// <param name="AError"></param>
         /// <param name="AUserInfo"></param>
         /// <returns></returns>
-        virtual protected bool ConnectClient(String AUserName,
+        virtual protected eLoginEnum ConnectClient(String AUserName,
             String APassword,
-            IClientManagerInterface AClientManager,
             out Int32 AProcessID,
             out String AWelcomeMessage,
             out Boolean ASystemEnabled,
@@ -261,52 +166,28 @@
 
             try
             {
-                AClientManager.ConnectClient(AUserName, APassword,
+                eLoginEnum result = FClientManager.ConnectClient(AUserName, APassword,
                     TClientInfo.ClientComputerName,
                     TClientInfo.ClientIPAddress,
                     new Version(TClientInfo.ClientAssemblyVersion),
                     DetermineClientServerConnectionType(),
-                    out FClientName,
                     out FClientID,
-                    out FCrossDomainURI,
-                    out FRemotingURLs,
-                    out FServerOS,
-                    out AProcessID,
                     out AWelcomeMessage,
                     out ASystemEnabled,
                     out AUserInfo);
 
-                if (FRemotingURLs.ContainsKey(RemotingConstants.REMOTINGURL_IDENTIFIER_POLLCLIENTTASKS))
+                if (result != eLoginEnum.eLoginSucceeded)
                 {
-                    FRemotingURL_PollClientTasks = (String)FRemotingURLs[RemotingConstants.REMOTINGURL_IDENTIFIER_POLLCLIENTTASKS];
+                    AError = result.ToString();
                 }
 
-                FConnector.Init(FCrossDomainURI, FClientID.ToString());
-
-                return true;
-            }
-            catch (EUserNotExistantException exp)
-            {
-                AError = exp.Message;
-                return false;
-            }
-            catch (ESystemDisabledException exp)
-            {
-                AError = exp.Message;
-                return false;
-            }
-            catch (EClientVersionMismatchException)
-            {
-                throw;
-            }
-            catch (ELoginFailedServerTooBusyException)
-            {
-                throw;
+                return result;
             }
             catch (Exception exp)
             {
                 TLogging.Log(exp.ToString() + Environment.NewLine + exp.StackTrace, TLoggingType.ToLogfile);
-                throw;
+                AError = exp.Message;
+                return eLoginEnum.eLoginFailedForUnspecifiedError;
             }
         }
 
@@ -330,14 +211,9 @@
                 if (FPollClientTasks != null)
                 {
                     FPollClientTasks.StopPollClientTasks();
-                    RemotingServices.Disconnect((MarshalByRefObject)FRemotePollClientTasks);
                 }
 
-                if (FRemote != null)
-                {
-                    ReturnValue = TRemoteBase.ClientManager.DisconnectClient(FClientID, out ACantDisconnectReason);
-                    TRemoteBase.Disconnect();
-                }
+                ReturnValue = FClientManager.DisconnectClient(out ACantDisconnectReason);
             }
             catch (System.Net.Sockets.SocketException)
             {
@@ -372,40 +248,6 @@
     }
 
 
-    #region EServerConnectionServerNotReachableException
-
-    /// <summary>
-    /// todoComment
-    /// </summary>
-    public class EServerConnectionServerNotReachableException : EOPAppException
-    {
-        /// <summary>
-        /// Initializes a new instance of this Exception Class.
-        /// </summary>
-        public EServerConnectionServerNotReachableException() : base()
-        {
-        }
-
-        /// <summary>
-        /// Initializes a new instance of this Exception Class with a specified error message.
-        /// </summary>
-        /// <param name="AMessage">The error message that explains the reason for the <see cref="Exception" />.</param>
-        public EServerConnectionServerNotReachableException(String AMessage) : base(AMessage)
-        {
-        }
-
-        /// <summary>
-        /// Initializes a new instance of this Exception Class with a specified error message and a reference to the inner <see cref="Exception" /> that is the cause of this <see cref="Exception" />.
-        /// </summary>
-        /// <param name="AMessage">The error message that explains the reason for the <see cref="Exception" />.</param>
-        /// <param name="AInnerException">The <see cref="Exception" /> that is the cause of the current <see cref="Exception" />, or a null reference if no inner <see cref="Exception" /> is specified.</param>
-        public EServerConnectionServerNotReachableException(string AMessage, Exception AInnerException) : base(AMessage, AInnerException)
-        {
-        }
-    }
-
-    #endregion
-
     /// <summary>
     /// todoComment
     /// </summary>
