--- trunk/csharp/ICT/Petra/ServerAdmin/PetraServerAdminConsole/Main.cs	2014-05-10 06:50:27.000000000 +0200
+++ remoting/csharp/ICT/Petra/ServerAdmin/PetraServerAdminConsole/Main.cs	2014-05-10 06:53:13.000000000 +0200
@@ -22,15 +22,13 @@
 // along with OpenPetra.org.  If not, see <http://www.gnu.org/licenses/>.
 //
 using System;
-using System.Net.Sockets;
-using System.Runtime.Remoting;
 using Ict.Common;
 using Ict.Common.Remoting.Shared;
-using Ict.Petra.ServerAdmin.App.Core;
 using System.Reflection;
 using System.Diagnostics;
 using System.IO;
-
+using Ict.Common.Remoting.Client;
+using Ict.Petra.ServerAdmin.App.Core.RemoteObjects;
 
 namespace PetraServerAdminConsole
 {
@@ -44,6 +42,8 @@
     /// </summary>
     public const String ServerAdminPrompt = "SERVERADMIN> ";
 
+    private static TMServerAdminNamespace.TServerAdminWebConnectorsNamespace TRemote;
+
     /// <summary>
     /// todoComment
     /// </summary>
@@ -67,15 +67,11 @@
     /// <summary>
     /// shut down the server (gets all connected clients to disconnect)
     /// </summary>
-    /// <param name="TRemote"></param>
     /// <param name="AWithUserInteraction"></param>
     /// <returns>true if shutdown was completed</returns>
-    public static bool ShutDownControlled(IServerAdminInterface TRemote, bool AWithUserInteraction)
+    public static bool ShutDownControlled(bool AWithUserInteraction)
     {
-        bool ReturnValue;
-        bool ack;
-
-        ack = false;
+        bool ack = false;
 
         if (AWithUserInteraction == true)
         {
@@ -96,45 +92,39 @@
         if (ack == true)
         {
             TLogging.Log("CONTROLLED SHUTDOWN PROCEDURE INITIATED...");
-            try
+
+            if (!TRemote.StopServerControlled(true))
             {
-                if (!TRemote.StopServerControlled(true))
-                {
-                    Console.WriteLine("     Shutdown cancelled!");
-                    Console.Write(ServerAdminPrompt);
-                    ReturnValue = false;
-                }
+                Console.WriteLine("     Shutdown cancelled!");
+                Console.Write(ServerAdminPrompt);
+                return false;
             }
-            catch (SocketException)
+
+            if (AWithUserInteraction == true)
             {
-                if (AWithUserInteraction == true)
-                {
-                    Console.WriteLine();
-                    TLogging.Log("SERVER STOPPED!");
-                    Console.WriteLine();
-                    Console.Write("Press ENTER to end PETRAServerADMIN...");
-                    Console.ReadLine();
-                }
+                Console.WriteLine();
+                TLogging.Log("SERVER STOPPED!");
+                Console.WriteLine();
+                Console.Write("Press ENTER to end PETRAServerADMIN...");
+                Console.ReadLine();
+                return true;
             }
-            ReturnValue = true;
         }
         else
         {
             Console.WriteLine("     Shutdown cancelled!");
             Console.Write(ServerAdminPrompt);
-            ReturnValue = false;
         }
 
-        return ReturnValue;
+        return false;
     }
 
     /// <summary>
     /// shut down the server
     /// </summary>
-    /// <param name="TRemote"></param>
     /// <param name="AWithUserInteraction"></param>
     /// <returns>true if shutdown was completed</returns>
-    public static bool ShutDown(IServerAdminInterface TRemote, bool AWithUserInteraction)
+    public static bool ShutDown(bool AWithUserInteraction)
     {
         bool ReturnValue;
         bool ack;
@@ -160,21 +150,17 @@
         if (ack == true)
         {
             TLogging.Log("SHUTDOWN PROCEDURE INITIATED...");
-            try
-            {
-                TRemote.StopServer();
-            }
-            catch (SocketException)
+            TRemote.StopServer();
+
+            if (AWithUserInteraction == true)
             {
-                if (AWithUserInteraction == true)
-                {
-                    Console.WriteLine();
-                    TLogging.Log("SERVER STOPPED!");
-                    Console.WriteLine();
-                    Console.Write("Press ENTER to end PETRAServerADMIN...");
-                    Console.ReadLine();
-                }
+                Console.WriteLine();
+                TLogging.Log("SERVER STOPPED!");
+                Console.WriteLine();
+                Console.Write("Press ENTER to end PETRAServerADMIN...");
+                Console.ReadLine();
             }
+
             ReturnValue = true;
         }
         else
@@ -190,9 +176,8 @@
     /// <summary>
     /// disconnect a client
     /// </summary>
-    /// <param name="TRemote"></param>
     /// <param name="ConsoleInput"></param>
-    public static void DisconnectClient(IServerAdminInterface TRemote, String ConsoleInput)
+    public static void DisconnectClient(String ConsoleInput)
     {
         Int16 ClientID;
         String CantDisconnectReason;
@@ -221,7 +206,7 @@
         }
     }
 
-    private static void ExportDatabase(IServerAdminInterface TRemote)
+    private static void ExportDatabase()
     {
         Console.Write("     Please enter filename of yml.gz file: ");
         string backupFile = Path.GetFullPath(Console.ReadLine());
@@ -241,7 +226,7 @@
         TLogging.Log("backup has been written to " + backupFile);
     }
 
-    private static bool RestoreDatabase(IServerAdminInterface TRemote, string ARestoreFile)
+    private static bool RestoreDatabase(string ARestoreFile)
     {
         string restoreFile = Path.GetFullPath(ARestoreFile);
 
@@ -280,7 +265,7 @@
         }
     }
 
-    private static void RestoreDatabase(IServerAdminInterface TRemote)
+    private static void RestoreDatabase()
     {
         Console.WriteLine(Environment.NewLine + "-> DELETING YOUR DATABASE <-");
         Console.Write("     Enter YES to import the new database (anything else to leave command): ");
@@ -290,7 +275,7 @@
             Console.Write("     Please enter filename of yml.gz file: ");
             string restoreFile = Console.ReadLine();
 
-            RestoreDatabase(TRemote, restoreFile);
+            RestoreDatabase(restoreFile);
         }
         else
         {
@@ -298,12 +283,12 @@
         }
     }
 
-    private static void RefreshAllCachedTables(IServerAdminInterface TRemote)
+    private static void RefreshAllCachedTables()
     {
         TRemote.RefreshAllCachedTables();
     }
 
-    private static void AddUser(IServerAdminInterface TRemote, string AUserId)
+    private static void AddUser(string AUserId)
     {
         TRemote.AddUser(AUserId);
     }
@@ -311,8 +296,7 @@
     /// <summary>
     /// shows the menu and processes the selections of the administrator
     /// </summary>
-    /// <param name="TRemote"></param>
-    public static void Menu(IServerAdminInterface TRemote)
+    public static void Menu()
     {
         bool ReadLineLoopEnd;
         bool EntryParsedOK;
@@ -328,7 +312,7 @@
         // ReadClientID,               used only for repeating invalid command line input
         // ReadClientTaskPriority;     used only for repeating invalid command line input
 
-        DisplayPetraServerInformation(TRemote);
+        DisplayPetraServerInformation();
 
         //
         // Startup done.
@@ -367,9 +351,12 @@
 
                         Console.WriteLine("     e: export the database to yml.gz");
                         Console.WriteLine("     i: import a yml.gz, which will overwrite the database");
-#if DEBUG
-                        Console.WriteLine("     r: Mark all Cached Tables for Refreshing");
-#endif
+
+                        if (TLogging.DebugLevel > 0)
+                        {
+                            Console.WriteLine("     r: Mark all Cached Tables for Refreshing");
+                        }
+
                         Console.WriteLine("     o: controlled Server shutdown (gets all connected clients to disconnect)");
                         Console.WriteLine("     u: unconditional Server shutdown (forces 'hard' disconnection of all Clients!)");
 
@@ -393,12 +380,12 @@
                     case 'D':
                         Console.WriteLine(Environment.NewLine + "-> Disconnect a certain Client <-");
 
-                        if (TRemote.ClientList.Count > 0)
+                        if (TRemote.GetClientList().Count > 0)
                         {
                             Console.WriteLine(TRemote.FormatClientList(false));
                             Console.Write("     Enter ClientID: ");
                             ConsoleInput = Console.ReadLine();
-                            DisconnectClient(TRemote, ConsoleInput);
+                            DisconnectClient(ConsoleInput);
                         }
                         else
                         {
@@ -414,7 +401,7 @@
                     case 'E':
                         Console.WriteLine(Environment.NewLine + "-> Export the database to yml.gz file <-");
 
-                        ExportDatabase(TRemote);
+                        ExportDatabase();
 
                         Console.Write(ServerAdminPrompt);
 
@@ -425,7 +412,7 @@
                     case 'I':
                         Console.WriteLine(Environment.NewLine + "-> Restore the database from yml.gz file <-");
 
-                        RestoreDatabase(TRemote);
+                        RestoreDatabase();
 
                         Console.Write(ServerAdminPrompt);
 
@@ -436,7 +423,7 @@
                     case 'R':
                         Console.WriteLine(Environment.NewLine + "-> Marking all Cached Tables for Refreshing... <-");
 
-                        RefreshAllCachedTables(TRemote);
+                        RefreshAllCachedTables();
 
                         Console.Write(ServerAdminPrompt);
 
@@ -444,10 +431,11 @@
 
                     case 'p':
                     case 'P':
+#if TODORemoting
                         string resp = "";
 
                         Console.WriteLine("  Server Timed Processing Status: " +
-                        "runs daily at " + TRemote.TimedProcessingDailyStartTime24Hrs + ".");
+                        "runs daily at " + TRemote.GetTimedProcessingDailyStartTime24Hrs + ".");
                         Console.WriteLine("    Partner Reminders: " + (TRemote.TimedProcessingJobEnabled("TProcessPartnerReminders") ? "On" : "Off"));
                         Console.WriteLine("    Automatic Intranet Export: " +
                         (TRemote.TimedProcessingJobEnabled("TProcessAutomatedIntranetExport") ? "On" : "Off"));
@@ -493,8 +481,8 @@
                                 TRemote.PerformTimedProcessingNow("TProcessDataChecks");
                             }
                         }
-
                         Console.Write(ServerAdminPrompt);
+#endif
                         break;
 
                     case 's':
@@ -502,7 +490,7 @@
                         Console.WriteLine(Environment.NewLine + "-> Server Status <-");
                         Console.WriteLine();
 
-                        DisplayPetraServerInformation(TRemote);
+                        DisplayPetraServerInformation();
 
                         Console.Write(ServerAdminPrompt);
 
@@ -512,7 +500,7 @@
                     case 'Q':
                         Console.WriteLine(Environment.NewLine + "-> Queue a Client Task for a certain Client <-");
 
-                        if (TRemote.ClientList.Count > 0)
+                        if (TRemote.GetClientList().Count > 0)
                         {
                             Console.WriteLine(TRemote.FormatClientList(false));
 
@@ -588,7 +576,7 @@
 
                     case 'y':
                     case 'Y':
-                        Console.WriteLine("Server memory: " + TRemote.ServerInfoMemory.ToString());
+                        Console.WriteLine("Server memory: " + TRemote.GetServerInfoMemory().ToString());
                         Console.Write(ServerAdminPrompt);
                         break;
 
@@ -601,12 +589,12 @@
 
                     case 'o':
                     case 'O':
-                        ReadLineLoopEnd = ShutDownControlled(TRemote, true);
+                        ReadLineLoopEnd = ShutDownControlled(true);
                         break;
 
                     case 'u':
                     case 'U':
-                        ReadLineLoopEnd = ShutDown(TRemote, true);
+                        ReadLineLoopEnd = ShutDown(true);
                         break;
 
                     case 'x':
@@ -636,59 +624,57 @@
     /// Retrieve information about connected Clients of the Server we are
     /// connected to.
     /// </summary>
-    /// <param name="ARemote">Instance of remote ServerManager</param>
     /// <param name="ATotalConnectedClients">Total number of Clients that
     /// have been connected while the PetraServer has been running.</param>
     /// <param name="ACurrentlyConnectedClients">Number of currently
     /// connected Clients.</param>
-    static void RetrieveConnectedClients(IServerAdminInterface ARemote, out int ATotalConnectedClients, out int ACurrentlyConnectedClients)
+    static void RetrieveConnectedClients(out int ATotalConnectedClients, out int ACurrentlyConnectedClients)
     {
         ATotalConnectedClients = -1;
         ACurrentlyConnectedClients = -1;
 
-        try
-        {
-            ATotalConnectedClients = ARemote.ClientsConnectedTotal;
-            ACurrentlyConnectedClients = ARemote.ClientsConnected;
-        }
-        catch (RemotingException remexp)
-        {
-            HandleConnectionError(remexp);
+        ATotalConnectedClients = TRemote.GetClientsConnectedTotal();
+        ACurrentlyConnectedClients = TRemote.GetClientsConnected();
+    }
 
-            Environment.Exit(0);
+    private static string SecurityToken = string.Empty;
 
-            // PetraServerAdminConsole application stops here !!!
-        }
-        catch (System.Net.Sockets.SocketException remexp)
-        {
-            HandleConnectionError(remexp);
+    /// we store a token on the file system, which is passed to the server as authorization token
+    private static string NewSecurityToken()
+    {
+        SecurityToken = Guid.NewGuid().ToString();
+        string TokenFilename = TAppSettingsManager.GetValue("Server.PathTemp") +
+                               Path.DirectorySeparatorChar + "ServerAdminToken" + SecurityToken + ".txt";
 
-            Environment.Exit(0);
+        StreamWriter sw = new StreamWriter(TokenFilename);
+        sw.WriteLine(SecurityToken);
+        sw.Close();
+        return SecurityToken;
+    }
 
-            // PetraServerAdminConsole application stops here !!!
-        }
-        catch (System.Exception)
-        {
-            throw;
-        }
+    private static void ClearSecurityToken()
+    {
+        string TokenFilename = TAppSettingsManager.GetValue("Server.PathTemp") +
+                               Path.DirectorySeparatorChar + "ServerAdminToken" + SecurityToken + ".txt";
+
+        File.Delete(TokenFilename);
     }
 
     /// <summary>
     /// Displays information about the Server we are connected to.
     /// </summary>
-    /// <param name="AServerManager">Instance of remote ServerManager</param>
-    static void DisplayPetraServerInformation(IServerAdminInterface AServerManager)
+    static void DisplayPetraServerInformation()
     {
         int TotalConnectedClients;
         int CurrentlyConnectedClients;
 
-        RetrieveConnectedClients(AServerManager, out TotalConnectedClients, out CurrentlyConnectedClients);
+        RetrieveConnectedClients(out TotalConnectedClients, out CurrentlyConnectedClients);
 
-        TLogging.Log(AServerManager.ServerInfoVersion);
+        TLogging.Log(TRemote.GetServerInfoVersion());
         TLogging.Log("  Clients connections since Server start: " + TotalConnectedClients.ToString());
         TLogging.Log("  Clients currently connected: " + CurrentlyConnectedClients.ToString());
 
-        TLogging.Log(AServerManager.ServerInfoState);
+        TLogging.Log(TRemote.GetServerInfoState());
     }
 
     /// <summary>
@@ -698,10 +684,9 @@
     /// <returns>void</returns>
     public static void Start()
     {
-        Ict.Petra.ServerAdmin.App.Core.TConnector TheConnector;
-        IServerAdminInterface TRemote;
         String ClientID;
         Boolean SilentSysadm;
+
         SilentSysadm = false;
 
         try
@@ -739,20 +724,20 @@
                 Console.WriteLine();
             }
 
-            // Instantiate a TServerManager object, which has all logic for Server
-            // startup and shutdown
-            TheConnector = new Ict.Petra.ServerAdmin.App.Core.TConnector();
-            TheConnector.GetServerConnection(TAppSettingsManager.ConfigFileName, out TRemote);
+            // Instantiate a remote object, which provides access to the server
+            THttpConnector.ServerAdminSecurityToken = NewSecurityToken();
+            THttpConnector.InitConnection(TAppSettingsManager.GetValue("OpenPetra.HTTPServer"));
+            TRemote = new TMServerAdminNamespace().WebConnectors;
 
             if (TAppSettingsManager.HasValue("Command"))
             {
                 if (TAppSettingsManager.GetValue("Command") == "Stop")
                 {
-                    ShutDown(TRemote, false);
+                    ShutDown(false);
                 }
                 else if (TAppSettingsManager.GetValue("Command") == "StopAndCloseClients")
                 {
-                    ShutDownControlled(TRemote, false);
+                    ShutDownControlled(false);
                 }
                 else if (TAppSettingsManager.GetValue("Command") == "ConnectedClients")
                 {
@@ -769,38 +754,33 @@
                 else if (TAppSettingsManager.GetValue("Command") == "DisconnectClient")
                 {
                     ClientID = TAppSettingsManager.GetValue("ClientID");
-                    DisconnectClient(TRemote, ClientID);
+                    DisconnectClient(ClientID);
                 }
                 else if (TAppSettingsManager.GetValue("Command") == "LoadYmlGz")
                 {
-                    RestoreDatabase(TRemote, TAppSettingsManager.GetValue("YmlGzFile"));
+                    RestoreDatabase(TAppSettingsManager.GetValue("YmlGzFile"));
                 }
                 else if (TAppSettingsManager.GetValue("Command") == "RefreshAllCachedTables")
                 {
-                    RefreshAllCachedTables(TRemote);
+                    RefreshAllCachedTables();
                 }
                 else if (TAppSettingsManager.GetValue("Command") == "AddUser")
                 {
-                    AddUser(TRemote, TAppSettingsManager.GetValue("UserId"));
+                    AddUser(TAppSettingsManager.GetValue("UserId"));
+                }
+                else if (TAppSettingsManager.GetValue("Command") == "Menu")
+                {
+                    Menu();
                 }
             }
             else
             {
-                Menu(TRemote);
+                Menu();
             }
 
             // All exceptions that are raised are handled here
             // Note: ServerAdmin stops after handling these exceptions!!!
         }
-        catch (RemotingException remexp)
-        {
-            if ((!SilentSysadm))
-            {
-                Console.WriteLine("RemotingException occured while connecting/communicating to PETRAServer: " + remexp.Message);
-            }
-
-            return;
-        }
         catch (Exception exp)
         {
             if ((!SilentSysadm))
@@ -811,6 +791,7 @@
             return;
         }
 
+        ClearSecurityToken();
         // THE VERY END OF SERVERADMIN :(
     }
 }
