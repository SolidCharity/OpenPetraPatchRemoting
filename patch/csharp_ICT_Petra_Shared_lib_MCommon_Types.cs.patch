--- before/csharp/ICT/Petra/Shared/lib/MCommon/Types.cs	2014-05-15 21:53:13.000000000 +0200
+++ patched/csharp/ICT/Petra/Shared/lib/MCommon/Types.cs	2014-05-15 21:56:00.000000000 +0200
@@ -4,7 +4,7 @@
 // @Authors:
 //       christiank
 //
-// Copyright 2004-2010 by OM International
+// Copyright 2004-2013 by OM International
 //
 // This file is part of OpenPetra.org.
 //
@@ -201,136 +201,4 @@
             throw new ArgumentException("Cannot convert the submitted PartnerClass '" + APartnerClass + "' to a TOfficeSpecificDataLabelUseEnum!");
         }
     }
-
-    /// object that will be serialized to the client.
-    /// it opens a new channel for each new object.
-    /// this is needed for cross domain marshalling.
-    [Serializable]
-    public class TAsynchronousExecutionProgressRemote : IAsynchronousExecutionProgress
-    {
-        private IAsynchronousExecutionProgress RemoteObject = null;
-        private string FObjectURI;
-        /// constructor
-        public TAsynchronousExecutionProgressRemote(string AObjectURI)
-        {
-            FObjectURI = AObjectURI;
-        }
-
-        private void InitRemoteObject()
-        {
-            RemoteObject = (IAsynchronousExecutionProgress)
-                           TConnector.TheConnector.GetRemoteObject(FObjectURI,
-                typeof(IAsynchronousExecutionProgress));
-        }
-
-        /// forward the property
-        public TAsyncExecProgressState ProgressState
-        {
-            get
-            {
-                if (RemoteObject == null)
-                {
-                    InitRemoteObject();
-                }
-
-                return RemoteObject.ProgressState;
-            }
-            set
-            {
-                if (RemoteObject == null)
-                {
-                    InitRemoteObject();
-                }
-
-                RemoteObject.ProgressState = value;
-            }
-        }
-        /// forward the property
-        public string ProgressInformation
-        {
-            get
-            {
-                if (RemoteObject == null)
-                {
-                    InitRemoteObject();
-                }
-
-                return RemoteObject.ProgressInformation;
-            }
-            set
-            {
-                if (RemoteObject == null)
-                {
-                    InitRemoteObject();
-                }
-
-                RemoteObject.ProgressInformation = value;
-            }
-        }
-        /// forward the property
-        public Int16 ProgressPercentage
-        {
-            get
-            {
-                if (RemoteObject == null)
-                {
-                    InitRemoteObject();
-                }
-
-                return RemoteObject.ProgressPercentage;
-            }
-            set
-            {
-                if (RemoteObject == null)
-                {
-                    InitRemoteObject();
-                }
-
-                RemoteObject.ProgressPercentage = value;
-            }
-        }
-        /// forward the property
-        public object Result
-        {
-            get
-            {
-                if (RemoteObject == null)
-                {
-                    InitRemoteObject();
-                }
-
-                return RemoteObject.Result;
-            }
-            set
-            {
-                if (RemoteObject == null)
-                {
-                    InitRemoteObject();
-                }
-
-                RemoteObject.Result = value;
-            }
-        }
-        /// forward the method call
-        public void ProgressCombinedInfo(out TAsyncExecProgressState ProgressState, out Int16 ProgressPercentage, out String ProgressInformation)
-        {
-            if (RemoteObject == null)
-            {
-                InitRemoteObject();
-            }
-
-            RemoteObject.ProgressCombinedInfo(out ProgressState, out ProgressPercentage, out ProgressInformation);
-        }
-
-        /// forward the method call
-        public void Cancel()
-        {
-            if (RemoteObject == null)
-            {
-                InitRemoteObject();
-            }
-
-            RemoteObject.Cancel();
-        }
-    }
 }
\ No newline at end of file
