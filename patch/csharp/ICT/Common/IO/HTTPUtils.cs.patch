--- openpetraNow.freeze2014_05/csharp/ICT/Common/IO/HTTPUtils.cs	2014-07-24 12:24:11.000000000 +0200
+++ openpetraNow.PatchRemoting/csharp/ICT/Common/IO/HTTPUtils.cs	2014-07-24 13:27:46.000000000 +0200
@@ -4,7 +4,7 @@
 // @Authors:
 //       timop
 //
-// Copyright 2004-2012 by OM International
+// Copyright 2004-2014 by OM International
 //
 // This file is part of OpenPetra.org.
 //
@@ -24,8 +24,11 @@
 using System;
 using System.IO;
 using System.Net;
+using System.Net.Security;
 using System.Text;
+using System.Threading;
 using System.Collections.Generic;
+using System.Collections.Specialized;
 
 namespace Ict.Common.IO
 {
@@ -35,6 +38,117 @@
     public class THTTPUtils
     {
         /// <summary>
+        /// this message is transfered via 404 code to the client
+        /// </summary>
+        public const String SESSION_ALREADY_CLOSED = "SESSION_ALREADY_CLOSED";
+
+        private class WebClientWithSession : WebClient
+        {
+            public WebClientWithSession()
+                : this(new CookieContainer())
+            {
+            }
+
+            public WebClientWithSession(CookieContainer c)
+            {
+                this.CookieContainer = c;
+
+                // see http://blogs.msdn.com/b/carloc/archive/2007/02/13/webclient-2-0-class-not-working-under-win2000-with-https.aspx
+                // it seems we need to specify SSL3 instead of TLS
+                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
+
+                // see http://stackoverflow.com/questions/566437/http-post-returns-the-error-417-expectation-failed-c
+                System.Net.ServicePointManager.Expect100Continue = false;
+
+                if (TAppSettingsManager.GetValue("IgnoreServerCertificateValidation", "false", false) == "true")
+                {
+                    // when checking the validity of a SSL certificate, always pass
+                    // this only makes sense in a testing environment, with self signed certificates
+                    ServicePointManager.ServerCertificateValidationCallback =
+                        new RemoteCertificateValidationCallback(
+                            delegate
+                            { return true; }
+                            );
+                }
+            }
+
+            public CookieContainer CookieContainer {
+                get; set;
+            }
+
+//            private bool FInUse = false;
+//            public bool InUse {
+//                get
+//                {
+//                    return FInUse;
+//                }
+//            }
+
+            public byte[] Get(string AUrl, NameValueCollection AParameters = null)
+            {
+                byte[] result = null;
+//                FInUse = true;
+
+                if (AParameters == null)
+                {
+                    result = DownloadData(AUrl);
+                }
+                else
+                {
+                    result = UploadValues(AUrl, AParameters);
+                }
+
+//                FInUse = false;
+                return result;
+            }
+
+            protected override WebRequest GetWebRequest(Uri address)
+            {
+                TLogging.Log("GetWebRequest: got called for URI: " + address.ToString());
+                WebRequest request = base.GetWebRequest(address);
+
+                request.Timeout = Convert.ToInt32(
+                    TimeSpan.FromMinutes(TAppSettingsManager.GetInt32("WebRequestTimeOutInMinutes", 15)).
+                    TotalMilliseconds);
+
+                // TODO Set HttpWebRequest.KeepAlive property to false to avoid  â€œThe request was aborted: The request was canceled.â€ when multiple Threads run on one TCP Session ?????
+                // see http://www.jaxidian.org/update/2007/05/05/8/
+
+                var castRequest = request as HttpWebRequest;
+
+                if (castRequest != null)
+                {
+                    castRequest.CookieContainer = this.CookieContainer;
+
+                    foreach (Cookie IndivCookie in castRequest.CookieContainer.GetCookies(address))
+                    {
+                        TLogging.Log("GetWebRequest: castRequest.CookieContainer cookie\r\n" +
+                            "Name: " + IndivCookie.Name + "\r\n" +
+                            "Value: " + IndivCookie.Value + "\r\n" +
+                            "Path: " + IndivCookie.Path + "\r\n" +
+                            "Domain: " + IndivCookie.Domain);
+                    }
+                }
+
+                return request;
+            }
+        }
+
+//        private static WebClientWithSession FWebClient = null;
+
+        /// <summary>
+        /// Single Session Cookie Container instance that is populated once at connection time
+        /// for the storage of the single cookie that stores the Session ID.
+        /// </summary>
+        //public static CookieContainer OverallSessionCookieContainer = null;
+        public static Cookie OverallCookie = null;
+
+        public static void ResetSession()
+        {
+            OverallCookie = null;
+        }
+
+        /// <summary>
         /// read from a website;
         /// used to check for available patches
         /// </summary>
@@ -42,24 +156,38 @@
         /// <returns></returns>
         public static string ReadWebsite(string url)
         {
-            string ReturnValue;
-
-            // see http://blogs.msdn.com/b/carloc/archive/2007/02/13/webclient-2-0-class-not-working-under-win2000-with-https.aspx
-            // it seems we need to specify SSL3 instead of TLS
-            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
+            string ReturnValue = null;
 
             byte[] buf;
-            WebClient client;
-            client = new WebClient();
-            ReturnValue = null;
+
+            WebClientWithSession WClient = GetNewWebClient(url);
+
+            if (TLogging.DebugLevel > 0)
+            {
+                string urlToLog = url;
+
+                if (url.Contains("password"))
+                {
+                    urlToLog = url.Substring(0, url.IndexOf("?")) + "?...";
+                }
+
+                TLogging.Log(urlToLog);
+            }
+
             try
             {
-                buf = client.DownloadData(url);
+                buf = WClient.Get(url);
 
                 if ((buf != null) && (buf.Length > 0))
                 {
                     ReturnValue = Encoding.ASCII.GetString(buf, 0, buf.Length);
                 }
+                else
+                {
+                    TLogging.Log("server did not return anything? timeout?");
+                }
+
+                StoreSessionCookie(WClient.CookieContainer, url);
             }
             catch (System.Net.WebException e)
             {
@@ -75,37 +203,165 @@
                         e.Message, TLoggingType.ToLogfile);
                 }
             }
-            finally
+
+            return ReturnValue;
+        }
+
+        private static void LogRequest(string url, NameValueCollection parameters)
+        {
+            TLogging.Log(url);
+
+            foreach (string k in parameters.Keys)
             {
+                if (k.ToLower().Contains("password"))
+                {
+                    TLogging.Log(" " + k + " = *****");
+                }
+                else
+                {
+                    if (parameters[k].Length < 2000)
+                    {
+                        TLogging.Log(" " + k + " = " + parameters[k]);
+                    }
+                    else
+                    {
+                        TLogging.Log(" " + k + " = " + parameters[k].Substring(0, 1000) + " [..]");
+                    }
+                }
             }
-            return ReturnValue;
         }
 
-        /// <summary>
-        /// overload: encode all the values for the parameters and retrieve the website
-        /// </summary>
-        public static string ReadWebsite(string url, SortedList <string, string>AParameters)
+        private static WebClientWithSession GetNewWebClient(string url)
+        {
+            CookieContainer CookieCont = new CookieContainer();
+
+            TLogging.Log("SetWebClient: url argument is: " + url);
+
+            if (url.StartsWith("Login"))
+            {
+                ResetSession();
+            }
+
+            if ((OverallCookie == null) && !url.Contains("Login"))
+            {
+                throw new Exception("Cannot connect to the server without a cookie");
+            }
+
+            if (OverallCookie != null)
+            {
+                TLogging.Log("SetWebClient: OverallCookie exists - copying!");
+                CookieCont = new CookieContainer();
+                CookieCont.Add(new Cookie(OverallCookie.Name, OverallCookie.Value, OverallCookie.Path, OverallCookie.Domain));
+                TLogging.Log("GetNewWebClient: copying cookie\r\n" +
+                    "Name: " + OverallCookie.Name + "\r\n" +
+                    "Value: " + OverallCookie.Value + "\r\n" +
+                    "Path: " + OverallCookie.Path + "\r\n" +
+                    "Domain: " + OverallCookie.Domain);
+            }
+
+            return new WebClientWithSession(CookieCont);
+        }
+
+        private static string WebClientUploadValues(string url, NameValueCollection parameters, int ANumberOfAttempts = 0)
         {
-            string urlWithParameters = url;
+            byte[] buf;
 
-            bool firstParameter = true;
+            WebClientWithSession WClient = GetNewWebClient(url);
 
-            foreach (string parameterName in AParameters.Keys)
+            try
+            {
+                buf = WClient.Get(url, parameters);
+            }
+            catch (System.Net.WebException ex)
             {
-                if (firstParameter)
+                HttpWebResponse httpWebResponse = (HttpWebResponse)ex.Response;
+
+                if (httpWebResponse != null)
                 {
-                    urlWithParameters += "?";
-                    firstParameter = false;
+                    if (httpWebResponse.StatusCode == HttpStatusCode.NotFound)
+                    {
+                        throw new Exception(SESSION_ALREADY_CLOSED);
+                    }
+
+                    if (httpWebResponse.StatusCode == HttpStatusCode.InternalServerError)
+                    {
+                        // do not retry if code 500 returns
+                        throw;
+                    }
                 }
-                else
+
+                if (ANumberOfAttempts > 0)
+                {
+                    // sleep for half a second
+                    System.Threading.Thread.Sleep(500);
+                    return WebClientUploadValues(url, parameters, ANumberOfAttempts - 1);
+                }
+
+                throw;
+            }
+
+            StoreSessionCookie(WClient.CookieContainer, url);
+
+            if ((buf != null) && (buf.Length > 0))
+            {
+                return Encoding.ASCII.GetString(buf, 0, buf.Length);
+            }
+
+            return String.Empty;
+        }
+
+        private static void StoreSessionCookie(CookieContainer AContainer, string AUrl)
+        {
+            // store the session cookie only if we don't have one
+            if (OverallCookie == null)
+            {
+                foreach (Cookie c in AContainer.GetCookies(new Uri(AUrl)))
                 {
-                    urlWithParameters += "&";
+                    if (c.Name == "OpenPetraSessionID")
+                    {
+                        TLogging.Log("returned cookie\r\n" +
+                            "Name: " + c.Name + "\r\n" +
+                            "Value: " + c.Value + "\r\n" +
+                            "Path: " + c.Path + "\r\n" +
+                            "Domain: " + c.Domain);
+
+                        OverallCookie = new Cookie(c.Name, c.Value, c.Path, c.Domain);
+                    }
                 }
+            }
+        }
+
+        /// <summary>
+        /// post a request to a website. used for Connectors
+        /// </summary>
+        public static string PostRequest(string url, NameValueCollection parameters)
+        {
+            if (TLogging.DebugLevel > 0)
+            {
+                LogRequest(url, parameters);
+            }
+
+            try
+            {
+                // config parameter value for how many times a connection should be attempted until the web call fails
+                return WebClientUploadValues(url, parameters, TAppSettingsManager.GetInt32("HTTPUtils.PostRequests", 10));
+            }
+            catch (System.Net.WebException e)
+            {
+                TLogging.Log("Trying to download: ");
+                LogRequest(url, parameters);
+                TLogging.Log(e.Message);
+                TLogging.Log("Error message from server:");
 
-                urlWithParameters += parameterName + "=" + Uri.EscapeDataString(AParameters[parameterName]);
+                if (e.Response != null)
+                {
+                    StreamReader sr = new StreamReader(e.Response.GetResponseStream());
+                    TLogging.Log(sr.ReadToEnd());
+                    sr.Close();
+                }
             }
 
-            return ReadWebsite(urlWithParameters);
+            return String.Empty;
         }
 
         /// <summary>
@@ -117,23 +373,20 @@
         /// <returns></returns>
         public static Boolean DownloadFile(string url, string filename)
         {
-            // see http://blogs.msdn.com/b/carloc/archive/2007/02/13/webclient-2-0-class-not-working-under-win2000-with-https.aspx
-            // it seems we need to specify SSL3 instead of TLS
-            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
-
-            Boolean ReturnValue = false;
-            WebClient client = new WebClient();
+            WebClientWithSession WClient = GetNewWebClient(url);
 
             try
             {
-                client.DownloadFile(url, filename);
-                ReturnValue = true;
+                WClient.DownloadFile(url, filename);
+                StoreSessionCookie(WClient.CookieContainer, url);
+                return true;
             }
             catch (Exception e)
             {
                 TLogging.Log(e.Message + " url: " + url + " filename: " + filename);
             }
-            return ReturnValue;
+
+            return false;
         }
     }
 }
\ No newline at end of file
