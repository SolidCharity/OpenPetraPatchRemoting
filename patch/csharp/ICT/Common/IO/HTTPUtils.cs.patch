--- openpetraNow.freeze2014_05/csharp/ICT/Common/IO/HTTPUtils.cs	2014-05-16 08:51:14.000000000 +0200
+++ openpetraNow.PatchRemoting/csharp/ICT/Common/IO/HTTPUtils.cs	2014-05-15 22:04:07.000000000 +0200
@@ -4,7 +4,7 @@
 // @Authors:
 //       timop
 //
-// Copyright 2004-2012 by OM International
+// Copyright 2004-2014 by OM International
 //
 // This file is part of OpenPetra.org.
 //
@@ -24,8 +24,11 @@
 using System;
 using System.IO;
 using System.Net;
+using System.Net.Security;
 using System.Text;
+using System.Threading;
 using System.Collections.Generic;
+using System.Collections.Specialized;
 
 namespace Ict.Common.IO
 {
@@ -35,6 +38,93 @@
     public class THTTPUtils
     {
         /// <summary>
+        /// this message is transfered via 404 code to the client
+        /// </summary>
+        public const String SESSION_ALREADY_CLOSED = "SESSION_ALREADY_CLOSED";
+
+        private class WebClientWithSession : WebClient
+        {
+            public WebClientWithSession()
+                : this(new CookieContainer())
+            {
+            }
+
+            public WebClientWithSession(CookieContainer c)
+            {
+                this.CookieContainer = c;
+
+                // see http://blogs.msdn.com/b/carloc/archive/2007/02/13/webclient-2-0-class-not-working-under-win2000-with-https.aspx
+                // it seems we need to specify SSL3 instead of TLS
+                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
+
+                // see http://stackoverflow.com/questions/566437/http-post-returns-the-error-417-expectation-failed-c
+                System.Net.ServicePointManager.Expect100Continue = false;
+
+                if (TAppSettingsManager.GetValue("IgnoreServerCertificateValidation", "false", false) == "true")
+                {
+                    // when checking the validity of a SSL certificate, always pass
+                    // this only makes sense in a testing environment, with self signed certificates
+                    ServicePointManager.ServerCertificateValidationCallback =
+                        new RemoteCertificateValidationCallback(
+                            delegate
+                            { return true; }
+                            );
+                }
+            }
+
+            public CookieContainer CookieContainer {
+                get; set;
+            }
+
+            private bool FInUse = false;
+            public bool InUse {
+                get
+                {
+                    return FInUse;
+                }
+            }
+
+            public byte[] Get(string AUrl, NameValueCollection AParameters = null)
+            {
+                byte[] result = null;
+                FInUse = true;
+
+                if (AParameters == null)
+                {
+                    result = DownloadData(AUrl);
+                }
+                else
+                {
+                    result = UploadValues(AUrl, AParameters);
+                }
+
+                FInUse = false;
+                return result;
+            }
+
+            protected override WebRequest GetWebRequest(Uri address)
+            {
+                WebRequest request = base.GetWebRequest(address);
+
+                request.Timeout = Convert.ToInt32(
+                    TimeSpan.FromMinutes(TAppSettingsManager.GetInt32("WebRequestTimeOutInMinutes", 15)).
+                    TotalMilliseconds);
+
+                var castRequest = request as HttpWebRequest;
+
+                if (castRequest != null)
+                {
+                    castRequest.CookieContainer = this.CookieContainer;
+                }
+
+                return request;
+            }
+        }
+
+        private static WebClientWithSession FWebClient = null;
+        private static CookieContainer SessionCookieContainer = null;
+
+        /// <summary>
         /// read from a website;
         /// used to check for available patches
         /// </summary>
@@ -42,24 +132,36 @@
         /// <returns></returns>
         public static string ReadWebsite(string url)
         {
-            string ReturnValue;
-
-            // see http://blogs.msdn.com/b/carloc/archive/2007/02/13/webclient-2-0-class-not-working-under-win2000-with-https.aspx
-            // it seems we need to specify SSL3 instead of TLS
-            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
+            string ReturnValue = null;
 
             byte[] buf;
-            WebClient client;
-            client = new WebClient();
-            ReturnValue = null;
+
+            SetWebClient(url);
+
+            if (TLogging.DebugLevel > 0)
+            {
+                string urlToLog = url;
+
+                if (url.Contains("password"))
+                {
+                    urlToLog = url.Substring(0, url.IndexOf("?")) + "?...";
+                }
+
+                TLogging.Log(urlToLog);
+            }
+
             try
             {
-                buf = client.DownloadData(url);
+                buf = FWebClient.Get(url);
 
                 if ((buf != null) && (buf.Length > 0))
                 {
                     ReturnValue = Encoding.ASCII.GetString(buf, 0, buf.Length);
                 }
+                else
+                {
+                    TLogging.Log("server did not return anything? timeout?");
+                }
             }
             catch (System.Net.WebException e)
             {
@@ -75,37 +177,139 @@
                         e.Message, TLoggingType.ToLogfile);
                 }
             }
-            finally
+
+            return ReturnValue;
+        }
+
+        private static void LogRequest(string url, NameValueCollection parameters)
+        {
+            TLogging.Log(url);
+
+            foreach (string k in parameters.Keys)
+            {
+                if (k.ToLower().Contains("password"))
+                {
+                    TLogging.Log(" " + k + " = *****");
+                }
+                else
+                {
+                    if (parameters[k].Length < 2000)
+                    {
+                        TLogging.Log(" " + k + " = " + parameters[k]);
+                    }
+                    else
+                    {
+                        TLogging.Log(" " + k + " = " + parameters[k].Substring(0, 1000) + " [..]");
+                    }
+                }
+            }
+        }
+
+        private static void SetWebClient(string url)
+        {
+            if (FWebClient == null)
             {
+                FWebClient = new WebClientWithSession();
+            }
+            else if (FWebClient.InUse)
+            {
+                if (SessionCookieContainer == null)
+                {
+                    SessionCookieContainer = new CookieContainer();
+
+                    CookieContainer cc = FWebClient.CookieContainer;
+
+                    foreach (Cookie c in cc.GetCookies(new Uri(url)))
+                    {
+                        if (c.Name == "OpenPetraSessionID")
+                        {
+                            SessionCookieContainer.Add(
+                                new Cookie(c.Name, c.Value, c.Path, c.Domain));
+                        }
+                    }
+                }
+
+                FWebClient = new WebClientWithSession(SessionCookieContainer);
             }
-            return ReturnValue;
         }
 
-        /// <summary>
-        /// overload: encode all the values for the parameters and retrieve the website
-        /// </summary>
-        public static string ReadWebsite(string url, SortedList <string, string>AParameters)
+        private static string WebClientUploadValues(string url, NameValueCollection parameters, int ANumberOfAttempts = 0)
         {
-            string urlWithParameters = url;
+            byte[] buf;
 
-            bool firstParameter = true;
+            SetWebClient(url);
 
-            foreach (string parameterName in AParameters.Keys)
+            try
             {
-                if (firstParameter)
+                buf = FWebClient.Get(url, parameters);
+            }
+            catch (System.Net.WebException ex)
+            {
+                HttpWebResponse httpWebResponse = (HttpWebResponse)ex.Response;
+
+                if (httpWebResponse != null)
                 {
-                    urlWithParameters += "?";
-                    firstParameter = false;
+                    if (httpWebResponse.StatusCode == HttpStatusCode.NotFound)
+                    {
+                        throw new Exception(SESSION_ALREADY_CLOSED);
+                    }
+
+                    if (httpWebResponse.StatusCode == HttpStatusCode.InternalServerError)
+                    {
+                        // do not retry if code 500 returns
+                        throw;
+                    }
                 }
-                else
+
+                if (ANumberOfAttempts > 0)
                 {
-                    urlWithParameters += "&";
+                    // sleep for half a second
+                    System.Threading.Thread.Sleep(500);
+                    return WebClientUploadValues(url, parameters, ANumberOfAttempts - 1);
                 }
 
-                urlWithParameters += parameterName + "=" + Uri.EscapeDataString(AParameters[parameterName]);
+                throw;
+            }
+
+            if ((buf != null) && (buf.Length > 0))
+            {
+                return Encoding.ASCII.GetString(buf, 0, buf.Length);
+            }
+
+            return String.Empty;
+        }
+
+        /// <summary>
+        /// post a request to a website. used for Connectors
+        /// </summary>
+        public static string PostRequest(string url, NameValueCollection parameters)
+        {
+            if (TLogging.DebugLevel > 0)
+            {
+                LogRequest(url, parameters);
+            }
+
+            try
+            {
+                // config parameter value for how many times a connection should be attempted until the web call fails
+                return WebClientUploadValues(url, parameters, TAppSettingsManager.GetInt32("HTTPUtils.PostRequests", 10));
+            }
+            catch (System.Net.WebException e)
+            {
+                TLogging.Log("Trying to download: ");
+                LogRequest(url, parameters);
+                TLogging.Log(e.Message);
+                TLogging.Log("Error message from server:");
+
+                if (e.Response != null)
+                {
+                    StreamReader sr = new StreamReader(e.Response.GetResponseStream());
+                    TLogging.Log(sr.ReadToEnd());
+                    sr.Close();
+                }
             }
 
-            return ReadWebsite(urlWithParameters);
+            return String.Empty;
         }
 
         /// <summary>
@@ -117,23 +314,22 @@
         /// <returns></returns>
         public static Boolean DownloadFile(string url, string filename)
         {
-            // see http://blogs.msdn.com/b/carloc/archive/2007/02/13/webclient-2-0-class-not-working-under-win2000-with-https.aspx
-            // it seems we need to specify SSL3 instead of TLS
-            ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
-
-            Boolean ReturnValue = false;
-            WebClient client = new WebClient();
+            if (FWebClient == null)
+            {
+                FWebClient = new WebClientWithSession();
+            }
 
             try
             {
-                client.DownloadFile(url, filename);
-                ReturnValue = true;
+                FWebClient.DownloadFile(url, filename);
+                return true;
             }
             catch (Exception e)
             {
                 TLogging.Log(e.Message + " url: " + url + " filename: " + filename);
             }
-            return ReturnValue;
+
+            return false;
         }
     }
 }
\ No newline at end of file
