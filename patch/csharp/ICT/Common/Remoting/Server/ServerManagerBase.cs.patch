--- openpetraNow.freeze2014_05/csharp/ICT/Common/Remoting/Server/ServerManagerBase.cs	2014-05-16 08:51:15.000000000 +0200
+++ openpetraNow.PatchRemoting/csharp/ICT/Common/Remoting/Server/ServerManagerBase.cs	2014-05-15 22:04:07.000000000 +0200
@@ -4,7 +4,7 @@
 // @Authors:
 //       christiank, timop
 //
-// Copyright 2004-2013 by OM International
+// Copyright 2004-2014 by OM International
 //
 // This file is part of OpenPetra.org.
 //
@@ -36,6 +36,7 @@
 using System.Text;
 using System.Threading;
 using GNU.Gettext;
+using System.Web;
 
 using Ict.Common;
 using Ict.Common.Remoting.Server;
@@ -46,8 +47,13 @@
     /// <summary>
     /// some common implementations for IServerAdminInterface
     /// </summary>
-    public class TServerManagerBase : MarshalByRefObject, IServerAdminInterface
+    public class TServerManagerBase : IServerAdminInterface
     {
+        /// <summary>
+        /// static: only initialised once for the whole server
+        /// </summary>
+        public static IServerAdminInterface TheServerManager = null;
+
         /// <summary>Keeps track of the number of times this Class has been
         /// instantiated</summary>
         private Int32 FNumberServerManagerInstances;
@@ -199,6 +205,35 @@
         }
 
         /// <summary>
+        /// check if a file with this security token exists
+        /// </summary>
+        public static bool CheckServerAdminToken(string AServerAdminToken)
+        {
+            string TokenFilename = TAppSettingsManager.GetValue("Server.PathTemp") +
+                                   Path.DirectorySeparatorChar + "ServerAdminToken" + AServerAdminToken + ".txt";
+
+            if (File.Exists(TokenFilename))
+            {
+                using (StreamReader sr = new StreamReader(TokenFilename))
+                {
+                    string content = sr.ReadToEnd();
+                    sr.Close();
+
+                    if (content.Trim() == AServerAdminToken)
+                    {
+                        return true;
+                    }
+                }
+            }
+            else
+            {
+                TLogging.Log("cannot find security token file " + TokenFilename);
+            }
+
+            return false;
+        }
+
+        /// <summary>
         /// Ensures Logging and an 'ordered cooperative shutdown' in case an Unhandled Exception is
         /// thrown in Threads, ThreadPool work items or Finalizers anywhere in the PetraServer.
         /// </summary>
@@ -221,17 +256,6 @@
         }
 
         /// <summary>
-        /// Ensures that the TServerManager class is instantiated only once remotely and
-        /// doesn't get GCed
-        /// </summary>
-        /// <returns>An object of type ILease used to control the lifetime policy for this
-        /// instance.</returns>
-        public override object InitializeLifetimeService()
-        {
-            return null;
-        }
-
-        /// <summary>
         /// Stops the Petra Server in a more controlled way than the <see cref="StopServer" /> Method.
         /// </summary>
         /// <remarks>
@@ -239,8 +263,7 @@
         /// to disconnect from the Server and to close. This Method monitors the connected Clients until
         /// either all Clients have responded by disconnecting or if at least one Client didn't respond and
         /// a timeout was exceeded. If this is the case and the Argument <paramref name="AForceAutomaticClosing" />
-        /// is true, the server shuts down anyways. If it is false, the user is asked to enter 'FORCE'
-        /// to force the closing of the Clients. If the user does that, a different ClientTask is queued
+        /// is true, a different ClientTask is queued
         /// for all Clients that are still connected that asks them to close (no saving of UserDefaults and
         /// no disconnection from the server!). This is a fallback in case (1) the client(s) crashed and can't
         /// either save the UserDefaults or can't disconnect, (2) the saving of UserDefaults or
@@ -249,7 +272,7 @@
         /// </remarks>
         /// <param name="AForceAutomaticClosing">Set to true to force closing of non-responding Clients (this
         /// is set to true by the ServerAdminConsole as this process is non-interactive in this case).</param>
-        /// <returns>False it the user abandoned the shutdown.</returns>
+        /// <returns>False if AForceAutomaticClosing is false and there are still clients logged in.</returns>
         public bool StopServerControlled(bool AForceAutomaticClosing)
         {
             const int SLEEP_TIME_PER_RETRY = 500; // 500 milliseconds = 0.5 seconds
@@ -268,7 +291,7 @@
                         ClientsConnected, ClientsConnected > 1 ? "Clients" : "Client"));
 
                 // Queue a ClientTask for all connected Clients that asks them to save the UserDefaults,  to disconnect from the Server and to close
-                QueueClientTask(-1, "DISCONNECT", "IMMEDIATE", 1);
+                QueueClientTask(-1, RemotingConstants.CLIENTTASKGROUP_DISCONNECT, "IMMEDIATE", 1);
 
                 // Loop that checks if all Clients have responded by disconnecting or if at least one Client didn't respond and a timeout was exceeded
 CheckAllClientsDisconnected:
@@ -304,13 +327,6 @@
                     // Special handling in case this Method is called from the ServerAdminConsole application
                     if (AForceAutomaticClosing)
                     {
-                        // Make the following ReadLine() Command read 'FORCE' to automatically go ahead with forcing all connected Clients to close!
-                        Console.SetIn(new StringReader("FORCE"));
-                        Console.WriteLine("FORCE"); // only to show on the Console that 'FORCE' has been typed (which was of course done automatically...)
-                    }
-
-                    if (Console.ReadLine() == "FORCE")
-                    {
                         // Check again that there are still Clients connected (could have disconnected while the user was typing 'FORCE'!)
                         if (ClientsConnected > 0)
                         {
@@ -321,7 +337,7 @@
                                     ClientsConnected, ClientsConnected > 1 ? "Clients" : "Client"));
 
                             // Queue a ClienTasks for all Clients that are still connected that asks them to close (no saving of UserDefaults and no disconnection from the server!). This is a fallback mechanism.
-                            QueueClientTask(-1, "DISCONNECT", "IMMEDIATE-HARDEXIT", 1);
+                            QueueClientTask(-1, RemotingConstants.CLIENTTASKGROUP_DISCONNECT, "IMMEDIATE-HARDEXIT", 1);
 
                             // Loop as long as TSrvSetting.ClientKeepAliveCheckIntervalInSeconds is to ensure that all Clients will have got the chance to pick up the queued Client Task
                             // (since it would not be easy to determine that every connected Client has picked up this message, this is the easy way of ensuring that).
@@ -347,12 +363,9 @@
                     }
                     else
                     {
-                        // Abandon the shutdown as the user decided to do that
+                        // Abandon the shutdown as there are still connected clients and we are not allowed to force the shutdown
                         return false;
                     }
-
-                    // Make ReadLine() Commands again read from the Console (re-set from the earlier Console.SetIn() command)
-                    Console.SetIn(Console.In);
                 }
             }
             else
@@ -367,6 +380,13 @@
             return true;  // this will never get executed, but is necessary for that Method to compile...
         }
 
+        private void StopServerThread()
+        {
+            Thread.Sleep(TimeSpan.FromSeconds(0.5));
+            TLogging.Log(Catalog.GetString("SHUTDOWN PROCEDURE FINISHED"));
+            Environment.Exit(0);
+        }
+
         /// <summary>
         /// Stops the Petra Server.
         /// A GC is invoked and waits for pending tasks before the application ends.
@@ -384,8 +404,8 @@
             TLogging.Log("  " + Catalog.GetString("SHUTDOWN: Executing step 2 of 2..."));
             GC.WaitForPendingFinalizers();
 
-            TLogging.Log(Catalog.GetString("SHUTDOWN PROCEDURE FINISHED"));
-            Environment.Exit(0);
+
+            new Thread(StopServerThread).Start();
 
             // Server application stops here !!!
         }
@@ -413,18 +433,7 @@
         /// <returns>true if ClientTask was queued, otherwise false.</returns>
         public bool QueueClientTask(System.Int16 AClientID, String ATaskGroup, String ATaskCode, System.Int16 ATaskPriority)
         {
-            bool ReturnValue;
-
-            if (TClientManager.QueueClientTask(AClientID, ATaskGroup, ATaskCode, ATaskPriority) >= 0)
-            {
-                ReturnValue = true;
-            }
-            else
-            {
-                ReturnValue = false;
-            }
-
-            return ReturnValue;
+            return TClientManager.QueueClientTask(AClientID, ATaskGroup, ATaskCode, null, null, null, null, ATaskPriority) >= 0;
         }
 
         /// <summary>
