--- openpetraNow.freeze2014_05/csharp/ICT/Petra/Client/MPartner/Gui/UC_PartnerFind_ByPartnerDetails.cs	2014-05-16 08:51:15.000000000 +0200
+++ openpetraNow.PatchRemoting/csharp/ICT/Petra/Client/MPartner/Gui/UC_PartnerFind_ByPartnerDetails.cs	2014-05-15 22:04:07.000000000 +0200
@@ -1348,7 +1348,7 @@
                 Application.DoEvents();
 
                 // Stop asynchronous search operation
-                FPartnerFindObject.AsyncExecProgress.Cancel();
+                FPartnerFindObject.StopSearch();
             }
         }
 
@@ -1744,7 +1744,7 @@
                 // Enable/disable according to how the search operation ended
                 if (Convert.ToBoolean(AEnable))
                 {
-                    if (FPartnerFindObject.AsyncExecProgress.ProgressState != TAsyncExecProgressState.Aeps_Stopped)
+                    if (FPartnerFindObject.Progress.JobFinished)
                     {
                         // Search operation ended without interruption
                         if (FPagedDataTable.Rows.Count > 0)
@@ -1935,54 +1935,36 @@
         /// <returns>void</returns>
         private void SearchFinishedCheckThread()
         {
-            TAsyncExecProgressState ProgressState;
-
-            /* Check whether this Thread should still execute */
+            // Check whether this thread should still execute
             while (FKeepUpSearchFinishedCheck)
             {
-                try
-                {
-                    /* The next line of code calls a function on the PetraServer
-                     * > causes a bit of data traffic everytime! */
-                    ProgressState = FPartnerFindObject.AsyncExecProgress.ProgressState;
-                }
-                catch (System.NullReferenceException)
-                {
-                    /*
-                     * This Exception occurs if the screen has been closed by the user
-                     * in the meantime -> don't try to do anything further - it will break!
-                     */
-                    return;  // Thread ends here!
-                }
-                catch (Exception)
-                {
-                    throw;
-                }
+                /* The next line of code calls a function on the PetraServer
+                 * > causes a bit of data traffic everytime! */
+                TProgressState state = FPartnerFindObject.Progress;
 
-                switch (ProgressState)
+                if (state.JobFinished)
                 {
-                    case TAsyncExecProgressState.Aeps_Finished:
-                        FKeepUpSearchFinishedCheck = false;
+                    FKeepUpSearchFinishedCheck = false;
 
-                        // Fetch the first page of data
-                        try
-                        {
-                            // For speed reasons we must add the necessary amount of emtpy Rows only *after* .AutoSizeCells()
-                            // has already been run! See XML Comment on the called Method
-                            // TSgrdDataGridPaged.LoadFirstDataPage for details!
-                            FPagedDataTable = grdResult.LoadFirstDataPage(@GetDataPagedResult, false);
+                    // Fetch the first page of data
+                    try
+                    {
+                        // For speed reasons we must add the necessary amount of emtpy Rows only *after* .AutoSizeCells()
+                        // has already been run! See XML Comment on the called Method
+                        // TSgrdDataGridPaged.LoadFirstDataPage for details!
+                        FPagedDataTable = grdResult.LoadFirstDataPage(@GetDataPagedResult, false);
 //TLogging.Log("grdResult.LoadFirstDataPage finished. FPagedDataTable.Rows.Count: " + FPagedDataTable.Rows.Count.ToString());
-                        }
-                        catch (Exception E)
-                        {
-                            MessageBox.Show(E.ToString());
-                        }
-                        break;
-
-                    case TAsyncExecProgressState.Aeps_Stopped:
-                        FKeepUpSearchFinishedCheck = false;
-                        EnableDisableUI(true);
-                        return;
+                    }
+                    catch (Exception E)
+                    {
+                        MessageBox.Show(E.ToString());
+                    }
+                }
+                else if (state.CancelJob)
+                {
+                    FKeepUpSearchFinishedCheck = false;
+                    EnableDisableUI(true);
+                    return;
                 }
 
                 // Sleep for some time. After that, this function is called again automatically.
