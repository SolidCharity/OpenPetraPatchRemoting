--- openpetra.freeze/csharp/ICT/Petra/Client/MFinance/Gui/Gift/GiftDetailFind.ManualCode.cs	2014-07-30 17:03:16.000000000 +0200
+++ openpetra.patched/csharp/ICT/Petra/Client/MFinance/Gui/Gift/GiftDetailFind.ManualCode.cs	2014-07-31 07:20:58.000000000 +0200
@@ -78,9 +78,6 @@
         {
             FGiftDetailFindObject = TRemote.MFinance.Finance.UIConnectors.GiftDetailFind();
 
-            // Register Object with the TEnsureKeepAlive Class so that it doesn't get GC'd
-            TEnsureKeepAlive.Register(FGiftDetailFindObject);
-
             // remove from the combobox all ledger numbers which the user does not have permission to access
             DataView cmbLedgerDataView = (DataView)cmbLedger.cmbCombobox.DataSource;
 
@@ -357,13 +354,13 @@
 
         /// <summary>
         /// Thread for the search operation. Monitor's the Server System.Object's
-        /// AsyncExecProgress.ProgressState and invokes UI updates from that.
+        /// Progress.ProgressState and invokes UI updates from that.
         ///
         /// </summary>
         /// <returns>void</returns>
         private void SearchFinishedCheckThread()
         {
-            TAsyncExecProgressState ProgressState;
+            TProgressState ProgressState;
 
             /* Check whether this Thread should still execute */
             while (FKeepUpSearchFinishedCheck)
@@ -372,7 +369,7 @@
                 {
                     /* The next line of code calls a function on the PetraServer
                      * > causes a bit of data traffic everytime! */
-                    ProgressState = FGiftDetailFindObject.AsyncExecProgress.ProgressState;
+                    ProgressState = FGiftDetailFindObject.Progress;
                 }
                 catch (System.NullReferenceException)
                 {
@@ -387,9 +384,8 @@
                     throw;
                 }
 
-                switch (ProgressState)
+                if (ProgressState.JobFinished)
                 {
-                    case TAsyncExecProgressState.Aeps_Finished:
                         FKeepUpSearchFinishedCheck = false;
 
                         // Fetch the first page of data
@@ -404,9 +400,9 @@
                         {
                             MessageBox.Show(E.ToString());
                         }
-                        break;
-
-                    case TAsyncExecProgressState.Aeps_Stopped:
+                }
+                else if (ProgressState.CancelJob)
+                {
                         FKeepUpSearchFinishedCheck = false;
                         EnableDisableUI(true);
                         return;
@@ -451,7 +447,8 @@
                 // Enable/disable according to how the search operation ended
                 if (Convert.ToBoolean(AEnable))
                 {
-                    if (FGiftDetailFindObject.AsyncExecProgress.ProgressState != TAsyncExecProgressState.Aeps_Stopped)
+                    TProgressState ThreadStatus = FGiftDetailFindObject.Progress;
+                    if (ThreadStatus.JobFinished)
                     {
                         // Search operation ended without interruption
                         if (FPagedDataTable.Rows.Count > 0)
@@ -581,8 +578,8 @@
             // ReleaseServerObject
             if (FGiftDetailFindObject != null)
             {
-                // UnRegister Object from the TEnsureKeepAlive Class so that the Object can get GC'd on the PetraServer
-                TEnsureKeepAlive.UnRegister(FGiftDetailFindObject);
+                // 'Release' instantiated UIConnector Object on the server side so it can get Garbage Collected there
+                TUIConnectorLifetimeHandling.ReleaseUIConnector((IDisposable)FGiftDetailFindObject);
                 FGiftDetailFindObject = null;
             }
         }
@@ -790,4 +787,4 @@
 
         #endregion
     }
-}
\ No newline at end of file
+}
