--- openpetraNow.freeze2014_05/csharp/ICT/Petra/Shared/CacheableTablesManager.cs	2014-05-16 08:51:15.000000000 +0200
+++ openpetraNow.PatchRemoting/csharp/ICT/Petra/Shared/CacheableTablesManager.cs	2014-05-15 22:04:07.000000000 +0200
@@ -4,7 +4,7 @@
 // @Authors:
 //       christiank, timop
 //
-// Copyright 2004-2012 by OM International
+// Copyright 2004-2013 by OM International
 //
 // This file is part of OpenPetra.org.
 //
@@ -84,7 +84,7 @@
     /// settings is probably not quite finished yet (due to time constraints).
     ///
     /// </summary>
-    public class TCacheableTablesManager : MarshalByRefObject, ICacheableTablesManager
+    public class TCacheableTablesManager : ICacheableTablesManager
     {
         /// a static instance for this class
         public static TCacheableTablesManager GCacheableTablesManager;
@@ -227,16 +227,6 @@
             FReadWriteLock = new System.Threading.ReaderWriterLock();
         }
 
-        /// <summary>
-        /// Ensures that TCacheableTablesManager exists until this AppDomain is unloaded.
-        ///
-        /// </summary>
-        /// <returns>void</returns>
-        public override object InitializeLifetimeService()
-        {
-            return null; // make sure that TCacheableTablesManager exists until this AppDomain is unloaded!
-        }
-
         #region Public Methods
 
         /// <summary>
@@ -885,17 +875,16 @@
                 WriteLockTakenOut = true;
                 TLogging.LogAtLevel(10, "TCacheableTablesManager.AddCachedTableInternal grabbed a WriterLock.");
 
-                // add the passed in DataTable to the Cache DataSet
-                try
-                {
-                    UDataCacheDataSet.Tables.Add((DataTable)ACacheableTable);
-                }
-                catch (System.InvalidCastException)
+                if (ACacheableTable.DataSet != null)
                 {
-                    // problem with Mono: https://bugzilla.novell.com/show_bug.cgi?id=521951 Cannot cast from source type to destination type
-                    // it happens after the table has been added, so should not cause any problems
+                    // TODORemoting: should we solve this problem in a better way?
+                    // TLogging.Log("TCacheableTablesManager: warning: table " + ACacheableTable.TableName + " already belongs to " + ACacheableTable.DataSet.DataSetName);
+                    ACacheableTable = ACacheableTable.Copy();
                 }
 
+                // add the passed in DataTable to the Cache DataSet
+                UDataCacheDataSet.Tables.Add(ACacheableTable);
+
                 UDataCacheDataSet.Tables[ACacheableTable.TableName].TableName = ACacheableTableName;
 
                 if (ACacheableTable.Rows.Count != 0)
@@ -1359,7 +1348,7 @@
     /// It contains only a helper function that is used by every Cache Manager.
     ///
     /// </summary>
-    public class TCacheableTablesLoader : object
+    public class TCacheableTablesLoader
     {
         /// <summary>Holds reference to an instance of TCacheableTablesManager</summary>
         protected TCacheableTablesManager FCacheableTablesManager;
