--- openpetraNow.freeze2014_05/csharp/ICT/Petra/Server/lib/MCommon/Main.cs	2014-05-16 08:51:15.000000000 +0200
+++ openpetraNow.PatchRemoting/csharp/ICT/Petra/Server/lib/MCommon/Main.cs	2014-05-16 08:52:09.000000000 +0200
@@ -4,7 +4,7 @@
 // @Authors:
 //       christiank, timop
 //
-// Copyright 2004-2012 by OM International
+// Copyright 2004-2013 by OM International
 //
 // This file is part of OpenPetra.org.
 //
@@ -27,7 +27,6 @@
 using System.Data;
 using System.Data.Common;
 using System.Data.Odbc;
-
 using Ict.Common;
 using Ict.Common.Data;
 using Ict.Common.DB;
@@ -35,7 +34,9 @@
 using Ict.Common.Remoting.Server;
 using Ict.Common.Remoting.Shared;
 using Ict.Common.Remoting.Client;
+using Ict.Petra.Server.App.Core;
 using Ict.Petra.Shared;
+using Ict.Petra.Server.MCommon.WebConnectors;
 using Ict.Petra.Shared.MPartner.Partner.Data;
 using Ict.Petra.Server.MPartner.Partner.Data.Access;
 using Npgsql;
@@ -253,10 +254,9 @@
     /// in a separate Thread!
     ///
     /// </summary>
-    public class TPagedDataSet : object
+    public class TPagedDataSet
     {
-        /// <summary>Asynchronous execution control object</summary>
-        TAsynchronousExecutionProgress FAsyncExecProgress;
+        private string FProgressID;
 
         /// <summary>An instance of TAsyncFindParameters containing parameters for the query execution</summary>
         TAsyncFindParameters FFindParameters;
@@ -296,17 +296,12 @@
             }
         }
 
-        /// <summary>Returns reference to the Asynchronous execution control object to the caller</summary>
-        public TAsynchronousExecutionProgress AsyncExecProgress
+        /// <summary>get the current progress</summary>
+        public TProgressState Progress
         {
             get
             {
-                return FAsyncExecProgress;
-            }
-
-            set
-            {
-                FAsyncExecProgress = value;
+                return TProgressTracker.GetCurrentState(FProgressID);
             }
         }
 
@@ -371,10 +366,25 @@
         /// <returns>void</returns>
         public void ExecuteQuery()
         {
+            bool ownDatabaseConnection = false;
+
+            if (!DBAccess.GDBAccessObj.ConnectionOK)
+            {
+                // we need a separate database object for this thread, since we cannot access the session object
+                DBAccess.GDBAccessObj.EstablishDBConnection(TSrvSetting.RDMBSType,
+                    TSrvSetting.PostgreSQLServer,
+                    TSrvSetting.PostgreSQLServerPort,
+                    TSrvSetting.PostgreSQLDatabaseName,
+                    TSrvSetting.DBUsername,
+                    TSrvSetting.DBPassword,
+                    "");
+                ownDatabaseConnection = true;
+            }
+
             try
             {
-                FAsyncExecProgress.ProgressInformation = "Executing Query...";
-                FAsyncExecProgress.ProgressState = TAsyncExecProgressState.Aeps_Executing;
+                FProgressID = Guid.NewGuid().ToString();
+                TProgressTracker.InitProgressTracker(FProgressID, "Executing Query...", 100.0m);
 
                 // Create SQL statement and execute it to return all records
                 ExecuteFullQuery();
@@ -384,7 +394,7 @@
                 TLogging.Log(this.GetType().FullName + ".ExecuteQuery:  Exception occured: " + exp.ToString());
 
                 // Inform the caller that something has gone wrong...
-                FAsyncExecProgress.ProgressState = TAsyncExecProgressState.Aeps_Stopped;
+                TProgressTracker.CancelJob(FProgressID);
 
                 /*
                  *     WE MUST 'SWALLOW' ANY EXCEPTION HERE, OTHERWISE THE WHOLE
@@ -396,6 +406,11 @@
                  *
                  */
             }
+
+            if (ownDatabaseConnection)
+            {
+                DBAccess.GDBAccessObj.CloseDBConnection();
+            }
         }
 
         private void ExecuteFullQuery()
@@ -467,16 +482,16 @@
                     TLogging.Log(this.GetType().FullName + ".ExecuteFullQuery: Query got cancelled; general NpgsqlException occured: " + Exp.ToString());
                 }
 
-                FAsyncExecProgress.ProgressInformation = "Query cancelled!";
-                FAsyncExecProgress.ProgressState = TAsyncExecProgressState.Aeps_Stopped;
+                TProgressTracker.SetCurrentState(FProgressID, "Query cancelled!", 0.0m);
+                TProgressTracker.CancelJob(FProgressID);
                 return;
             }
             catch (Exception Exp)
             {
                 TLogging.LogAtLevel(7, this.GetType().FullName + ".ExecuteFullQuery: Query got cancelled; general Exception occured: " + Exp.ToString());
 
-                FAsyncExecProgress.ProgressInformation = "Query cancelled!";
-                FAsyncExecProgress.ProgressState = TAsyncExecProgressState.Aeps_Stopped;
+                TProgressTracker.SetCurrentState(FProgressID, "Query cancelled!", 0.0m);
+                TProgressTracker.CancelJob(FProgressID);
 
                 return;
             }
@@ -488,30 +503,13 @@
                 }
             }
 
-            /*
-             * Check if query execution cancellation was requested - this is only a back-stop for the corner case where
-             * the user cancelled the query after the query execution was finished by the DB (if the user had cancelled
-             * while the query was still being executed by the DB, the appropriate Exception would have be handled in the
-             * Exception handler above and this Method would have already been exited!)
-             */
-            if (FAsyncExecProgress.FCancelExecution)
-            {
-                TLogging.LogAtLevel(7, this.GetType().FullName + ".ExecuteFullQuery: Query got cancelled (FCancelExecution = true)!");
-
-                FAsyncExecProgress.ProgressInformation = "Query cancelled!";
-                FAsyncExecProgress.ProgressState = TAsyncExecProgressState.Aeps_Stopped;
-
-                return;
-            }
-
             TLogging.LogAtLevel(7,
                 (this.GetType().FullName + ".ExecuteFullQuery: FDataAdapter.Fill finished. FTotalRecords: " + FTotalRecords.ToString()));
 
             FPageDataTable = FTmpDataTable.Clone();
             FPageDataTable.TableName = FFindParameters.FSearchName;
-            FAsyncExecProgress.ProgressInformation = "Query executed.";
-            FAsyncExecProgress.ProgressPercentage = 100;
-            FAsyncExecProgress.ProgressState = TAsyncExecProgressState.Aeps_Finished;
+            TProgressTracker.SetCurrentState(FProgressID, "Query executed.", 100.0m);
+            TProgressTracker.FinishJob(FProgressID);
         }
 
         /// <summary>
@@ -591,9 +589,8 @@
                 }
             }
 
-            FAsyncExecProgress.ProgressInformation = "Query executed.";
-            FAsyncExecProgress.ProgressPercentage = 100;
-            FAsyncExecProgress.ProgressState = TAsyncExecProgressState.Aeps_Finished;
+            TProgressTracker.SetCurrentState(FProgressID, "Query executed.", 100.0m);
+            TProgressTracker.FinishJob(FProgressID);
             return FPageDataTable;
         }
 
@@ -661,26 +658,39 @@
         /// <returns>void</returns>
         public void StopQuery()
         {
+#if TODORemoting
             TLogging.LogAtLevel(7,
                 (this.GetType().FullName + ".StopQuery: ProgressState = " +
                  Enum.GetName(typeof(TAsyncExecProgressState), FAsyncExecProgress.ProgressState)));
+#endif
+            // TODO this cannot work, since FDataAdapter is always null
+            // and even if FDataAdapter was implemented, we would have a different thread, and I am not sure how to access the Database object from the other thread?
+
+            if (FDataAdapter == null)
+            {
+                return;
+            }
 
             try
             {
+#if TODORemoting
                 if (FAsyncExecProgress.ProgressState == TAsyncExecProgressState.Aeps_Stopping)
                 {
-                    // Cancel the executing query.
-                    TLogging.LogAtLevel(7, "TPagedDataSet.StopQuery called...");
-                    FDataAdapter.SelectCommand.Cancel();
-                    TLogging.LogAtLevel(7, "TPagedDataSet.StopQuery finished.");
-                }
-                else
-                {
-                    TLogging.LogAtLevel(7, this.GetType().FullName + ".StopQuery: Query got cancelled after returning records.");
-                }
+#endif
+                // Cancel the executing query.
+                TLogging.LogAtLevel(7, "TPagedDataSet.StopQuery called...");
+                FDataAdapter.SelectCommand.Cancel();
+                TLogging.LogAtLevel(7, "TPagedDataSet.StopQuery finished.");
+#if TODORemoting
+            }
+            else
+            {
+                TLogging.LogAtLevel(7, this.GetType().FullName + ".StopQuery: Query got cancelled after returning records.");
+            }
+#endif
 
-                FAsyncExecProgress.ProgressInformation = "Query cancelled!";
-                FAsyncExecProgress.ProgressState = TAsyncExecProgressState.Aeps_Stopped;
+                TProgressTracker.SetCurrentState(FProgressID, "Query cancelled!", 0.0m);
+                TProgressTracker.CancelJob(FProgressID);
             }
             catch (Exception exp)
             {
@@ -772,142 +782,6 @@
     }
     #endregion
 
-    #region TAsynchronousExecutionProgress
-
-    /// <summary>
-    /// Universal class for providing progress information and results for
-    /// asynchronous executions of any kind (eg. updating a ProgressBar on the Client
-    /// side).
-    ///
-    /// This class will be instantiated by some object ('Instantiator') to be able to
-    /// tell a 'Listener' object how much progress has been done on a certain task.
-    /// For this the 'Instantiator' will create an instance of this class and have
-    /// a Property that accesses this instance. The 'Listener' object can use the
-    /// IAsynchronousExecutionProgress interface to read Properties and call the
-    /// Cancel method. The 'Listener' object can be instantiated on the Client side
-    /// as well as on the Server side.
-    ///
-    /// </summary>
-    public class TAsynchronousExecutionProgress : TConfigurableMBRObject, IAsynchronousExecutionProgress
-    {
-        /// <summary>Property value.</summary>
-        private String FProgressInformation;
-
-        /// <summary>Property value.</summary>
-        Int16 FProgressPercentage;
-
-        /// <summary>Property value.</summary>
-        System.Object FResult;
-
-        /// <summary>Property value.</summary>
-        TAsyncExecProgressState FProgressState;
-
-        /// <summary>Set to true when the Cancel method is called (monitor this in the 'Instantiator' to know if to stop).</summary>
-        internal Boolean FCancelExecution;
-
-        /// <summary>Text that explains what is currently going on.</summary>
-        public String ProgressInformation
-        {
-            get
-            {
-                return FProgressInformation;
-            }
-
-            set
-            {
-                FProgressInformation = value;
-            }
-        }
-
-        /// <summary>A value between 0 and 100 that tells to which degree the progress is finished.</summary>
-        public Int16 ProgressPercentage
-        {
-            get
-            {
-                return FProgressPercentage;
-            }
-
-            set
-            {
-                FProgressPercentage = value;
-            }
-        }
-
-        /// <summary>Indicates the ProgressState. (Default: Aeps_ReadyToStart)</summary>
-        public TAsyncExecProgressState ProgressState
-        {
-            get
-            {
-                return FProgressState;
-            }
-
-            set
-            {
-                FProgressState = value;
-            }
-        }
-        /// <summary>Can be used by the 'Instantiator' to pass a result to the 'Listener'</summary>
-        public object Result
-        {
-            get
-            {
-                return FResult;
-            }
-
-            set
-            {
-                FResult = value;
-            }
-        }
-
-        /// <summary>Event that fires when the Cancel method is called (only the 'Instantiator' should subscribe to that).</summary>
-        public event System.EventHandler StopAsyncronousExecution;
-
-        /// <summary>
-        /// constructor
-        /// </summary>
-        public TAsynchronousExecutionProgress() : base()
-        {
-            FProgressState = TAsyncExecProgressState.Aeps_ReadyToStart;
-        }
-
-        /// <summary>
-        /// Returns ProgressState, ProgressPercentage and ProgressInformation properties
-        /// in one call. This saves considerable bandwidth over calling these properties
-        /// seperately!
-        ///
-        /// </summary>
-        /// <param name="ProgressState">See ProgressState property</param>
-        /// <param name="ProgressPercentage">See ProgressPercentage property</param>
-        /// <param name="ProgressInformation">See ProgressInformation property
-        /// </param>
-        /// <returns>void</returns>
-        public void ProgressCombinedInfo(out TAsyncExecProgressState ProgressState, out Int16 ProgressPercentage, out String ProgressInformation)
-        {
-            ProgressState = FProgressState;
-            ProgressPercentage = FProgressPercentage;
-            ProgressInformation = FProgressInformation;
-        }
-
-        /// <summary>
-        /// Call this method from the 'Listener' object to signal the 'Instantiator' that the execution should be stopped
-        /// </summary>
-        /// <returns>void</returns>
-        public void Cancel()
-        {
-            TLogging.LogAtLevel(6, "TAsynchronousExecutionProgress.Cancel called!");
-            FCancelExecution = true;
-            FProgressState = TAsyncExecProgressState.Aeps_Stopping;
-
-            // Fire event
-            if (StopAsyncronousExecution != null)
-            {
-                StopAsyncronousExecution(this, new System.EventArgs());
-            }
-        }
-    }
-    #endregion
-
     #region TDynamicSearchHelper
 
     /// <summary>
